/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FilterConfigPanel.java
 *
 * Created on 07.12.2010, 13:35:28
 */

package org.kaiec.retro.listview;

import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.kaiec.retro.data.EventLog;

/**
 *
 * @author kai
 */
public class FilterConfigPanel extends javax.swing.JPanel {

    TableRowSorter sorter;
    ListViewerTopComponent parent;
    List<SingleFilterPanel> filters = new ArrayList<SingleFilterPanel>();
    /** Creates new form FilterConfigPanel */
    public FilterConfigPanel(ListViewerTopComponent parent, TableRowSorter sorter) {
        initComponents();
        this.sorter = sorter;
        this.parent = parent;
        filterPanel.setLayout(new BoxLayout(filterPanel, BoxLayout.Y_AXIS));
         
    }

    public TableModel getModel() {
        return (TableModel) sorter.getModel();
    }


    public String getFilterSignature() {
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (SingleFilterPanel filter:filters) {
                if (!first) sb.append(" && ");
                else first = false;
                sb.append(filter.getFilterSignature());
        }
        return sb.toString();
    }

    public RowFilter<Object,Object> getRowFilter() {
            List<RowFilter<Object,Object>> flist = new ArrayList<RowFilter<Object,Object>>();
            for (SingleFilterPanel filter:filters) {
                flist.add(filter.getRowFilter());
            }
            return RowFilter.andFilter(flist);
    }

    private void createFilterPanel() {
        filterPanel.removeAll();
        for (SingleFilterPanel filter:filters) {
            filterPanel.add(filter);
        }
        filterPanel.revalidate();
        filterPanel.repaint();
    }

    public void removeFilter(SingleFilterPanel filter) {
        filters.remove(filter);
        createFilterPanel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addFilterButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        filterScrollPanel = new javax.swing.JScrollPane();
        filterPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        addFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/kaiec/retro/listview/add.png"))); // NOI18N
        addFilterButton.setText(org.openide.util.NbBundle.getMessage(FilterConfigPanel.class, "FilterConfigPanel.addFilterButton.text")); // NOI18N
        addFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFilterButtonActionPerformed(evt);
            }
        });
        add(addFilterButton, java.awt.BorderLayout.PAGE_START);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/kaiec/retro/listview/ok.png"))); // NOI18N
        saveButton.setText(org.openide.util.NbBundle.getMessage(FilterConfigPanel.class, "FilterConfigPanel.saveButton.text")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        add(saveButton, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 581, Short.MAX_VALUE)
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );

        filterScrollPanel.setViewportView(filterPanel);

        add(filterScrollPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void addFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFilterButtonActionPerformed
        filters.add(new SingleFilterPanel(this));
        createFilterPanel();
    }//GEN-LAST:event_addFilterButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        parent.applyFilters();
    }//GEN-LAST:event_saveButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFilterButton;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JScrollPane filterScrollPanel;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

}
