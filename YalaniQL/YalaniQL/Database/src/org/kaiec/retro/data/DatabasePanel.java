/*
 * This file is part of Semtinel (http://www.semtinel.org).
 * Copyright (c) 2007-2010 Kai Eckert (http://www.kaiec.org).
 *
 * Semtinel is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Semtinel is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Semtinel.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.kaiec.retro.data;

import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JOptionPane;
import org.hibernate.tool.hbm2ddl.SchemaUpdate;

/**
 *
 * @author  kai
 */
public class DatabasePanel extends javax.swing.JPanel {
    private Preferences preferences;
    private HibernateUtil hibernateUtil;
    private DatabaseSelector databaseSelector1 = new DatabaseSelector();


    /** Creates new form DatabasePanel */
    public DatabasePanel() {
        initComponents();
        jPanel1.add(databaseSelector1, BorderLayout.CENTER);
        this.hibernateUtil = HibernateUtil.getInstance();
        this.preferences = hibernateUtil.getPreferences();
        this.currentDatabaseLocation.setText(preferences.getDatabaseLocation());
        preferences.addPropertyChangeListener(new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                Preferences prefs = (Preferences) evt.getSource();
                currentDatabaseLocation.setText(prefs.getDatabaseLocation());
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentDatabaseLocation = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        setLocationButton = new javax.swing.JButton();
        updateSchemaButton = new javax.swing.JButton();
        exportSchemaButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        analyzeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        currentDatabaseLocation.setEnabled(false);

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DatabasePanel.class, "DatabasePanel.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(DatabasePanel.class, "DatabasePanel.jLabel4.text")); // NOI18N

        setLocationButton.setText(org.openide.util.NbBundle.getMessage(DatabasePanel.class, "DatabasePanel.setLocationButton.text")); // NOI18N
        setLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLocationButtonActionPerformed(evt);
            }
        });

        updateSchemaButton.setText(org.openide.util.NbBundle.getMessage(DatabasePanel.class, "DatabasePanel.updateSchemaButton.text")); // NOI18N
        updateSchemaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSchemaButtonActionPerformed(evt);
            }
        });

        exportSchemaButton.setText(org.openide.util.NbBundle.getMessage(DatabasePanel.class, "DatabasePanel.exportSchemaButton.text")); // NOI18N
        exportSchemaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSchemaButtonActionPerformed(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(DatabasePanel.class, "DatabasePanel.jLabel5.text")); // NOI18N

        analyzeButton.setText(org.openide.util.NbBundle.getMessage(DatabasePanel.class, "DatabasePanel.analyzeButton.text")); // NOI18N
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currentDatabaseLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                        .addGap(56, 56, 56)
                        .addComponent(setLocationButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 336, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(updateSchemaButton)
                            .addComponent(exportSchemaButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 385, Short.MAX_VALUE)
                        .addComponent(analyzeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentDatabaseLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setLocationButton))
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateSchemaButton)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportSchemaButton)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(analyzeButton)
                    .addComponent(jLabel5))
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void setLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLocationButtonActionPerformed
    setNewDatabaseLocation();
}//GEN-LAST:event_setLocationButtonActionPerformed

/**
 *
 * @param evt the ActionEvent fired by pressing the 'update' button
 */
private void updateSchemaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSchemaButtonActionPerformed
    if (currentDatabaseLocation.getText().trim().isEmpty()) {
        return;
    }

    int res = JOptionPane.showConfirmDialog(this, "This will update your database scheme to the currently running version of Semtinel.\nA backup of your database is strongly recommended. Do you want to continue?", "Are your sure?", JOptionPane.YES_NO_OPTION);
    
    if (res!=JOptionPane.YES_OPTION) {
        return;
    } else {
        new Thread(new Runnable() {

            @Override
            public void run() {
                /*
                 * Disable the 'update' button to avoid repeated operation
                 * */
                updateSchemaButton.setEnabled(false);
                try {
                    RecordList.getInstance().saveBackup();
                    SchemaUpdate update = new SchemaUpdate(hibernateUtil.getConfig());
                    update.execute(false, true);
                } catch (RuntimeException e) {
                    throw e;
                } finally {
                    updateSchemaButton.setEnabled(true);
                }
            }

        }, "db-schema-update-thread").start();
    }
}//GEN-LAST:event_updateSchemaButtonActionPerformed

/**
 *
 * @param evt the ActionEvent fired by pressing the 'recreate' button
 */
private void exportSchemaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSchemaButtonActionPerformed
    if (currentDatabaseLocation.getText().trim().isEmpty()) {
        return;
    }

    int res = JOptionPane.showConfirmDialog(this, "This will delete all data in the currently selected database. Are you sure?", "Are your sure?", JOptionPane.YES_NO_OPTION);
    
    if (res!=JOptionPane.YES_OPTION) {
        return;
    } else {
        new Thread(new Runnable() {

            @Override
            public void run() {
                /*
                 * Disable the 'recreate' button to avoid repeated operation
                 * */
                exportSchemaButton.setEnabled(false);
                try {
                    // RecordList.getInstance().saveBackup();
                    RecreateDatabase.recreate();
                } catch (RuntimeException e) {
                    throw e;
                } finally {
                    exportSchemaButton.setEnabled(true);
                }
            }
        }, "db-schema-export-thread").start();
    } 
}//GEN-LAST:event_exportSchemaButtonActionPerformed

/**
 *
 * @param evt the ActionEvent fired by pressing the 'analyze' button
 */
private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
    new Thread(new Runnable() {
        
        @Override
        public void run() {
            /*
             * Disable the 'analyze' button to avoid repeated operation
             **/
            analyzeButton.setEnabled(false);
            try {
                hibernateUtil.getSession().createSQLQuery("ANALYZE").executeUpdate();
            } catch (RuntimeException e) {
                throw e;
            } finally {
                analyzeButton.setEnabled(true);
            }
        }
        
    }, "db-analyzer-thread").start();
}//GEN-LAST:event_analyzeButtonActionPerformed

public void setNewDatabaseLocation() {
    currentDatabaseLocation.setText(databaseSelector1.getDatabaseLocation());
    preferences.setDatabaseLocation(currentDatabaseLocation.getText());
    preferences.save();
    RecordList.getInstance().datachanged();
}

/**
 *
 * @return true if the current location has changed and is not empty
 */
public boolean isLocationChanged() {
    return ! ( databaseSelector1.getDatabaseLocation().isEmpty() || currentDatabaseLocation.getText().equals(databaseSelector1.getDatabaseLocation()) );
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeButton;
    private javax.swing.JTextField currentDatabaseLocation;
    private javax.swing.JButton exportSchemaButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton setLocationButton;
    private javax.swing.JButton updateSchemaButton;
    // End of variables declaration//GEN-END:variables

}
